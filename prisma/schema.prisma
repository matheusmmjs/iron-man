generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String      @id @default(cuid())
  name       String
  subdomain  String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  users      User[]
  clients    Client[]
  schedules  Schedule[]
  payments   Payment[]
  evolutions Evolution[]
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(INSTRUCTOR)
  tenantId  String
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[]
}

enum Role {
  ADMIN
  INSTRUCTOR
  RECEPTIONIST
}

model Client {
  id                String       @id @default(cuid())
  name              String
  email             String
  phone             String
  cpf               String
  address           String?
  birthDate         DateTime
  objective         String?
  medicalConditions String?
  status            ClientStatus @default(ACTIVE)
  tenantId          String
  tenant            Tenant       @relation(fields: [tenantId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  schedules         Schedule[]
  payments          Payment[]
  evolutions        Evolution[]

  @@unique([email, tenantId])
  @@unique([cpf, tenantId])
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Schedule {
  id       String         @id @default(cuid())
  title    String
  start    DateTime
  end      DateTime
  status   ScheduleStatus @default(SCHEDULED)
  notes    String?
  clientId String
  client   Client         @relation(fields: [clientId], references: [id])
  userId   String
  user     User           @relation(fields: [userId], references: [id])
  tenantId String
  tenant   Tenant         @relation(fields: [tenantId], references: [id])
}

enum ScheduleStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

model Payment {
  id       String   @id @default(cuid())
  amount   Float
  date     DateTime @default(now())
  clientId String
  client   Client   @relation(fields: [clientId], references: [id])
  tenantId String
  tenant   Tenant   @relation(fields: [tenantId], references: [id])
}

model Evolution {
  id           String   @id @default(cuid())
  date         DateTime @default(now())
  notes        String
  professional String
  clientId     String
  client       Client   @relation(fields: [clientId], references: [id])
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}
